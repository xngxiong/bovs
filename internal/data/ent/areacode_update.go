// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bovs/internal/data/ent/areacode"
	"bovs/internal/data/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AreaCodeUpdate is the builder for updating AreaCode entities.
type AreaCodeUpdate struct {
	config
	hooks    []Hook
	mutation *AreaCodeMutation
}

// Where appends a list predicates to the AreaCodeUpdate builder.
func (acu *AreaCodeUpdate) Where(ps ...predicate.AreaCode) *AreaCodeUpdate {
	acu.mutation.Where(ps...)
	return acu
}

// SetCode sets the "code" field.
func (acu *AreaCodeUpdate) SetCode(i int64) *AreaCodeUpdate {
	acu.mutation.ResetCode()
	acu.mutation.SetCode(i)
	return acu
}

// AddCode adds i to the "code" field.
func (acu *AreaCodeUpdate) AddCode(i int64) *AreaCodeUpdate {
	acu.mutation.AddCode(i)
	return acu
}

// SetName sets the "name" field.
func (acu *AreaCodeUpdate) SetName(s string) *AreaCodeUpdate {
	acu.mutation.SetName(s)
	return acu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (acu *AreaCodeUpdate) SetNillableName(s *string) *AreaCodeUpdate {
	if s != nil {
		acu.SetName(*s)
	}
	return acu
}

// SetLevel sets the "level" field.
func (acu *AreaCodeUpdate) SetLevel(i int8) *AreaCodeUpdate {
	acu.mutation.ResetLevel()
	acu.mutation.SetLevel(i)
	return acu
}

// AddLevel adds i to the "level" field.
func (acu *AreaCodeUpdate) AddLevel(i int8) *AreaCodeUpdate {
	acu.mutation.AddLevel(i)
	return acu
}

// SetPCode sets the "p_code" field.
func (acu *AreaCodeUpdate) SetPCode(i int64) *AreaCodeUpdate {
	acu.mutation.ResetPCode()
	acu.mutation.SetPCode(i)
	return acu
}

// AddPCode adds i to the "p_code" field.
func (acu *AreaCodeUpdate) AddPCode(i int64) *AreaCodeUpdate {
	acu.mutation.AddPCode(i)
	return acu
}

// Mutation returns the AreaCodeMutation object of the builder.
func (acu *AreaCodeUpdate) Mutation() *AreaCodeMutation {
	return acu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (acu *AreaCodeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, acu.sqlSave, acu.mutation, acu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acu *AreaCodeUpdate) SaveX(ctx context.Context) int {
	affected, err := acu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (acu *AreaCodeUpdate) Exec(ctx context.Context) error {
	_, err := acu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acu *AreaCodeUpdate) ExecX(ctx context.Context) {
	if err := acu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acu *AreaCodeUpdate) check() error {
	if v, ok := acu.mutation.Code(); ok {
		if err := areacode.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "AreaCode.code": %w`, err)}
		}
	}
	if v, ok := acu.mutation.PCode(); ok {
		if err := areacode.PCodeValidator(v); err != nil {
			return &ValidationError{Name: "p_code", err: fmt.Errorf(`ent: validator failed for field "AreaCode.p_code": %w`, err)}
		}
	}
	return nil
}

func (acu *AreaCodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := acu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(areacode.Table, areacode.Columns, sqlgraph.NewFieldSpec(areacode.FieldID, field.TypeInt))
	if ps := acu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acu.mutation.Code(); ok {
		_spec.SetField(areacode.FieldCode, field.TypeInt64, value)
	}
	if value, ok := acu.mutation.AddedCode(); ok {
		_spec.AddField(areacode.FieldCode, field.TypeInt64, value)
	}
	if value, ok := acu.mutation.Name(); ok {
		_spec.SetField(areacode.FieldName, field.TypeString, value)
	}
	if value, ok := acu.mutation.Level(); ok {
		_spec.SetField(areacode.FieldLevel, field.TypeInt8, value)
	}
	if value, ok := acu.mutation.AddedLevel(); ok {
		_spec.AddField(areacode.FieldLevel, field.TypeInt8, value)
	}
	if value, ok := acu.mutation.PCode(); ok {
		_spec.SetField(areacode.FieldPCode, field.TypeInt64, value)
	}
	if value, ok := acu.mutation.AddedPCode(); ok {
		_spec.AddField(areacode.FieldPCode, field.TypeInt64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, acu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{areacode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	acu.mutation.done = true
	return n, nil
}

// AreaCodeUpdateOne is the builder for updating a single AreaCode entity.
type AreaCodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AreaCodeMutation
}

// SetCode sets the "code" field.
func (acuo *AreaCodeUpdateOne) SetCode(i int64) *AreaCodeUpdateOne {
	acuo.mutation.ResetCode()
	acuo.mutation.SetCode(i)
	return acuo
}

// AddCode adds i to the "code" field.
func (acuo *AreaCodeUpdateOne) AddCode(i int64) *AreaCodeUpdateOne {
	acuo.mutation.AddCode(i)
	return acuo
}

// SetName sets the "name" field.
func (acuo *AreaCodeUpdateOne) SetName(s string) *AreaCodeUpdateOne {
	acuo.mutation.SetName(s)
	return acuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (acuo *AreaCodeUpdateOne) SetNillableName(s *string) *AreaCodeUpdateOne {
	if s != nil {
		acuo.SetName(*s)
	}
	return acuo
}

// SetLevel sets the "level" field.
func (acuo *AreaCodeUpdateOne) SetLevel(i int8) *AreaCodeUpdateOne {
	acuo.mutation.ResetLevel()
	acuo.mutation.SetLevel(i)
	return acuo
}

// AddLevel adds i to the "level" field.
func (acuo *AreaCodeUpdateOne) AddLevel(i int8) *AreaCodeUpdateOne {
	acuo.mutation.AddLevel(i)
	return acuo
}

// SetPCode sets the "p_code" field.
func (acuo *AreaCodeUpdateOne) SetPCode(i int64) *AreaCodeUpdateOne {
	acuo.mutation.ResetPCode()
	acuo.mutation.SetPCode(i)
	return acuo
}

// AddPCode adds i to the "p_code" field.
func (acuo *AreaCodeUpdateOne) AddPCode(i int64) *AreaCodeUpdateOne {
	acuo.mutation.AddPCode(i)
	return acuo
}

// Mutation returns the AreaCodeMutation object of the builder.
func (acuo *AreaCodeUpdateOne) Mutation() *AreaCodeMutation {
	return acuo.mutation
}

// Where appends a list predicates to the AreaCodeUpdate builder.
func (acuo *AreaCodeUpdateOne) Where(ps ...predicate.AreaCode) *AreaCodeUpdateOne {
	acuo.mutation.Where(ps...)
	return acuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (acuo *AreaCodeUpdateOne) Select(field string, fields ...string) *AreaCodeUpdateOne {
	acuo.fields = append([]string{field}, fields...)
	return acuo
}

// Save executes the query and returns the updated AreaCode entity.
func (acuo *AreaCodeUpdateOne) Save(ctx context.Context) (*AreaCode, error) {
	return withHooks(ctx, acuo.sqlSave, acuo.mutation, acuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acuo *AreaCodeUpdateOne) SaveX(ctx context.Context) *AreaCode {
	node, err := acuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (acuo *AreaCodeUpdateOne) Exec(ctx context.Context) error {
	_, err := acuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acuo *AreaCodeUpdateOne) ExecX(ctx context.Context) {
	if err := acuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acuo *AreaCodeUpdateOne) check() error {
	if v, ok := acuo.mutation.Code(); ok {
		if err := areacode.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "AreaCode.code": %w`, err)}
		}
	}
	if v, ok := acuo.mutation.PCode(); ok {
		if err := areacode.PCodeValidator(v); err != nil {
			return &ValidationError{Name: "p_code", err: fmt.Errorf(`ent: validator failed for field "AreaCode.p_code": %w`, err)}
		}
	}
	return nil
}

func (acuo *AreaCodeUpdateOne) sqlSave(ctx context.Context) (_node *AreaCode, err error) {
	if err := acuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(areacode.Table, areacode.Columns, sqlgraph.NewFieldSpec(areacode.FieldID, field.TypeInt))
	id, ok := acuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AreaCode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := acuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, areacode.FieldID)
		for _, f := range fields {
			if !areacode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != areacode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := acuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acuo.mutation.Code(); ok {
		_spec.SetField(areacode.FieldCode, field.TypeInt64, value)
	}
	if value, ok := acuo.mutation.AddedCode(); ok {
		_spec.AddField(areacode.FieldCode, field.TypeInt64, value)
	}
	if value, ok := acuo.mutation.Name(); ok {
		_spec.SetField(areacode.FieldName, field.TypeString, value)
	}
	if value, ok := acuo.mutation.Level(); ok {
		_spec.SetField(areacode.FieldLevel, field.TypeInt8, value)
	}
	if value, ok := acuo.mutation.AddedLevel(); ok {
		_spec.AddField(areacode.FieldLevel, field.TypeInt8, value)
	}
	if value, ok := acuo.mutation.PCode(); ok {
		_spec.SetField(areacode.FieldPCode, field.TypeInt64, value)
	}
	if value, ok := acuo.mutation.AddedPCode(); ok {
		_spec.AddField(areacode.FieldPCode, field.TypeInt64, value)
	}
	_node = &AreaCode{config: acuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, acuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{areacode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	acuo.mutation.done = true
	return _node, nil
}
