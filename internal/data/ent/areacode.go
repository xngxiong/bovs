// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bovs/internal/data/ent/areacode"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AreaCode is the model entity for the AreaCode schema.
type AreaCode struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Code holds the value of the "code" field.
	Code int64 `json:"code,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Level holds the value of the "level" field.
	Level int8 `json:"level,omitempty"`
	// PCode holds the value of the "p_code" field.
	PCode        int64 `json:"p_code,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AreaCode) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case areacode.FieldID, areacode.FieldCode, areacode.FieldLevel, areacode.FieldPCode:
			values[i] = new(sql.NullInt64)
		case areacode.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AreaCode fields.
func (ac *AreaCode) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case areacode.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ac.ID = int(value.Int64)
		case areacode.FieldCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				ac.Code = value.Int64
			}
		case areacode.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ac.Name = value.String
			}
		case areacode.FieldLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				ac.Level = int8(value.Int64)
			}
		case areacode.FieldPCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field p_code", values[i])
			} else if value.Valid {
				ac.PCode = value.Int64
			}
		default:
			ac.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AreaCode.
// This includes values selected through modifiers, order, etc.
func (ac *AreaCode) Value(name string) (ent.Value, error) {
	return ac.selectValues.Get(name)
}

// Update returns a builder for updating this AreaCode.
// Note that you need to call AreaCode.Unwrap() before calling this method if this AreaCode
// was returned from a transaction, and the transaction was committed or rolled back.
func (ac *AreaCode) Update() *AreaCodeUpdateOne {
	return NewAreaCodeClient(ac.config).UpdateOne(ac)
}

// Unwrap unwraps the AreaCode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ac *AreaCode) Unwrap() *AreaCode {
	_tx, ok := ac.config.driver.(*txDriver)
	if !ok {
		panic("ent: AreaCode is not a transactional entity")
	}
	ac.config.driver = _tx.drv
	return ac
}

// String implements the fmt.Stringer.
func (ac *AreaCode) String() string {
	var builder strings.Builder
	builder.WriteString("AreaCode(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ac.ID))
	builder.WriteString("code=")
	builder.WriteString(fmt.Sprintf("%v", ac.Code))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ac.Name)
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(fmt.Sprintf("%v", ac.Level))
	builder.WriteString(", ")
	builder.WriteString("p_code=")
	builder.WriteString(fmt.Sprintf("%v", ac.PCode))
	builder.WriteByte(')')
	return builder.String()
}

// AreaCodes is a parsable slice of AreaCode.
type AreaCodes []*AreaCode
