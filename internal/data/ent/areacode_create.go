// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bovs/internal/data/ent/areacode"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AreaCodeCreate is the builder for creating a AreaCode entity.
type AreaCodeCreate struct {
	config
	mutation *AreaCodeMutation
	hooks    []Hook
}

// SetCode sets the "code" field.
func (acc *AreaCodeCreate) SetCode(i int64) *AreaCodeCreate {
	acc.mutation.SetCode(i)
	return acc
}

// SetName sets the "name" field.
func (acc *AreaCodeCreate) SetName(s string) *AreaCodeCreate {
	acc.mutation.SetName(s)
	return acc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (acc *AreaCodeCreate) SetNillableName(s *string) *AreaCodeCreate {
	if s != nil {
		acc.SetName(*s)
	}
	return acc
}

// SetLevel sets the "level" field.
func (acc *AreaCodeCreate) SetLevel(i int8) *AreaCodeCreate {
	acc.mutation.SetLevel(i)
	return acc
}

// SetPCode sets the "p_code" field.
func (acc *AreaCodeCreate) SetPCode(i int64) *AreaCodeCreate {
	acc.mutation.SetPCode(i)
	return acc
}

// Mutation returns the AreaCodeMutation object of the builder.
func (acc *AreaCodeCreate) Mutation() *AreaCodeMutation {
	return acc.mutation
}

// Save creates the AreaCode in the database.
func (acc *AreaCodeCreate) Save(ctx context.Context) (*AreaCode, error) {
	acc.defaults()
	return withHooks(ctx, acc.sqlSave, acc.mutation, acc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (acc *AreaCodeCreate) SaveX(ctx context.Context) *AreaCode {
	v, err := acc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acc *AreaCodeCreate) Exec(ctx context.Context) error {
	_, err := acc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acc *AreaCodeCreate) ExecX(ctx context.Context) {
	if err := acc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acc *AreaCodeCreate) defaults() {
	if _, ok := acc.mutation.Name(); !ok {
		v := areacode.DefaultName
		acc.mutation.SetName(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acc *AreaCodeCreate) check() error {
	if _, ok := acc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "AreaCode.code"`)}
	}
	if v, ok := acc.mutation.Code(); ok {
		if err := areacode.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "AreaCode.code": %w`, err)}
		}
	}
	if _, ok := acc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "AreaCode.name"`)}
	}
	if _, ok := acc.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "AreaCode.level"`)}
	}
	if _, ok := acc.mutation.PCode(); !ok {
		return &ValidationError{Name: "p_code", err: errors.New(`ent: missing required field "AreaCode.p_code"`)}
	}
	if v, ok := acc.mutation.PCode(); ok {
		if err := areacode.PCodeValidator(v); err != nil {
			return &ValidationError{Name: "p_code", err: fmt.Errorf(`ent: validator failed for field "AreaCode.p_code": %w`, err)}
		}
	}
	return nil
}

func (acc *AreaCodeCreate) sqlSave(ctx context.Context) (*AreaCode, error) {
	if err := acc.check(); err != nil {
		return nil, err
	}
	_node, _spec := acc.createSpec()
	if err := sqlgraph.CreateNode(ctx, acc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	acc.mutation.id = &_node.ID
	acc.mutation.done = true
	return _node, nil
}

func (acc *AreaCodeCreate) createSpec() (*AreaCode, *sqlgraph.CreateSpec) {
	var (
		_node = &AreaCode{config: acc.config}
		_spec = sqlgraph.NewCreateSpec(areacode.Table, sqlgraph.NewFieldSpec(areacode.FieldID, field.TypeInt))
	)
	if value, ok := acc.mutation.Code(); ok {
		_spec.SetField(areacode.FieldCode, field.TypeInt64, value)
		_node.Code = value
	}
	if value, ok := acc.mutation.Name(); ok {
		_spec.SetField(areacode.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := acc.mutation.Level(); ok {
		_spec.SetField(areacode.FieldLevel, field.TypeInt8, value)
		_node.Level = value
	}
	if value, ok := acc.mutation.PCode(); ok {
		_spec.SetField(areacode.FieldPCode, field.TypeInt64, value)
		_node.PCode = value
	}
	return _node, _spec
}

// AreaCodeCreateBulk is the builder for creating many AreaCode entities in bulk.
type AreaCodeCreateBulk struct {
	config
	builders []*AreaCodeCreate
}

// Save creates the AreaCode entities in the database.
func (accb *AreaCodeCreateBulk) Save(ctx context.Context) ([]*AreaCode, error) {
	specs := make([]*sqlgraph.CreateSpec, len(accb.builders))
	nodes := make([]*AreaCode, len(accb.builders))
	mutators := make([]Mutator, len(accb.builders))
	for i := range accb.builders {
		func(i int, root context.Context) {
			builder := accb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AreaCodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, accb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, accb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, accb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (accb *AreaCodeCreateBulk) SaveX(ctx context.Context) []*AreaCode {
	v, err := accb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (accb *AreaCodeCreateBulk) Exec(ctx context.Context) error {
	_, err := accb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (accb *AreaCodeCreateBulk) ExecX(ctx context.Context) {
	if err := accb.Exec(ctx); err != nil {
		panic(err)
	}
}
