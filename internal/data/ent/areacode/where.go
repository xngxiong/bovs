// Code generated by ent, DO NOT EDIT.

package areacode

import (
	"bovs/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldLTE(FieldID, id))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v int64) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldEQ(FieldCode, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldEQ(FieldName, v))
}

// Level applies equality check predicate on the "level" field. It's identical to LevelEQ.
func Level(v int8) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldEQ(FieldLevel, v))
}

// PCode applies equality check predicate on the "p_code" field. It's identical to PCodeEQ.
func PCode(v int64) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldEQ(FieldPCode, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v int64) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v int64) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...int64) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...int64) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v int64) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v int64) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v int64) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v int64) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldLTE(FieldCode, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldContainsFold(FieldName, v))
}

// LevelEQ applies the EQ predicate on the "level" field.
func LevelEQ(v int8) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldEQ(FieldLevel, v))
}

// LevelNEQ applies the NEQ predicate on the "level" field.
func LevelNEQ(v int8) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldNEQ(FieldLevel, v))
}

// LevelIn applies the In predicate on the "level" field.
func LevelIn(vs ...int8) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldIn(FieldLevel, vs...))
}

// LevelNotIn applies the NotIn predicate on the "level" field.
func LevelNotIn(vs ...int8) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldNotIn(FieldLevel, vs...))
}

// LevelGT applies the GT predicate on the "level" field.
func LevelGT(v int8) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldGT(FieldLevel, v))
}

// LevelGTE applies the GTE predicate on the "level" field.
func LevelGTE(v int8) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldGTE(FieldLevel, v))
}

// LevelLT applies the LT predicate on the "level" field.
func LevelLT(v int8) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldLT(FieldLevel, v))
}

// LevelLTE applies the LTE predicate on the "level" field.
func LevelLTE(v int8) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldLTE(FieldLevel, v))
}

// PCodeEQ applies the EQ predicate on the "p_code" field.
func PCodeEQ(v int64) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldEQ(FieldPCode, v))
}

// PCodeNEQ applies the NEQ predicate on the "p_code" field.
func PCodeNEQ(v int64) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldNEQ(FieldPCode, v))
}

// PCodeIn applies the In predicate on the "p_code" field.
func PCodeIn(vs ...int64) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldIn(FieldPCode, vs...))
}

// PCodeNotIn applies the NotIn predicate on the "p_code" field.
func PCodeNotIn(vs ...int64) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldNotIn(FieldPCode, vs...))
}

// PCodeGT applies the GT predicate on the "p_code" field.
func PCodeGT(v int64) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldGT(FieldPCode, v))
}

// PCodeGTE applies the GTE predicate on the "p_code" field.
func PCodeGTE(v int64) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldGTE(FieldPCode, v))
}

// PCodeLT applies the LT predicate on the "p_code" field.
func PCodeLT(v int64) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldLT(FieldPCode, v))
}

// PCodeLTE applies the LTE predicate on the "p_code" field.
func PCodeLTE(v int64) predicate.AreaCode {
	return predicate.AreaCode(sql.FieldLTE(FieldPCode, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AreaCode) predicate.AreaCode {
	return predicate.AreaCode(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AreaCode) predicate.AreaCode {
	return predicate.AreaCode(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AreaCode) predicate.AreaCode {
	return predicate.AreaCode(func(s *sql.Selector) {
		p(s.Not())
	})
}
