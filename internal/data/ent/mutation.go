// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bovs/internal/data/ent/areacode"
	"bovs/internal/data/ent/predicate"
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAreaCode = "AreaCode"
)

// AreaCodeMutation represents an operation that mutates the AreaCode nodes in the graph.
type AreaCodeMutation struct {
	config
	op            Op
	typ           string
	id            *int
	code          *int64
	addcode       *int64
	name          *string
	level         *int8
	addlevel      *int8
	p_code        *int64
	addp_code     *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*AreaCode, error)
	predicates    []predicate.AreaCode
}

var _ ent.Mutation = (*AreaCodeMutation)(nil)

// areacodeOption allows management of the mutation configuration using functional options.
type areacodeOption func(*AreaCodeMutation)

// newAreaCodeMutation creates new mutation for the AreaCode entity.
func newAreaCodeMutation(c config, op Op, opts ...areacodeOption) *AreaCodeMutation {
	m := &AreaCodeMutation{
		config:        c,
		op:            op,
		typ:           TypeAreaCode,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAreaCodeID sets the ID field of the mutation.
func withAreaCodeID(id int) areacodeOption {
	return func(m *AreaCodeMutation) {
		var (
			err   error
			once  sync.Once
			value *AreaCode
		)
		m.oldValue = func(ctx context.Context) (*AreaCode, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AreaCode.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAreaCode sets the old AreaCode of the mutation.
func withAreaCode(node *AreaCode) areacodeOption {
	return func(m *AreaCodeMutation) {
		m.oldValue = func(context.Context) (*AreaCode, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AreaCodeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AreaCodeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AreaCodeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AreaCodeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AreaCode.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCode sets the "code" field.
func (m *AreaCodeMutation) SetCode(i int64) {
	m.code = &i
	m.addcode = nil
}

// Code returns the value of the "code" field in the mutation.
func (m *AreaCodeMutation) Code() (r int64, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the AreaCode entity.
// If the AreaCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AreaCodeMutation) OldCode(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// AddCode adds i to the "code" field.
func (m *AreaCodeMutation) AddCode(i int64) {
	if m.addcode != nil {
		*m.addcode += i
	} else {
		m.addcode = &i
	}
}

// AddedCode returns the value that was added to the "code" field in this mutation.
func (m *AreaCodeMutation) AddedCode() (r int64, exists bool) {
	v := m.addcode
	if v == nil {
		return
	}
	return *v, true
}

// ResetCode resets all changes to the "code" field.
func (m *AreaCodeMutation) ResetCode() {
	m.code = nil
	m.addcode = nil
}

// SetName sets the "name" field.
func (m *AreaCodeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AreaCodeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the AreaCode entity.
// If the AreaCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AreaCodeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *AreaCodeMutation) ResetName() {
	m.name = nil
}

// SetLevel sets the "level" field.
func (m *AreaCodeMutation) SetLevel(i int8) {
	m.level = &i
	m.addlevel = nil
}

// Level returns the value of the "level" field in the mutation.
func (m *AreaCodeMutation) Level() (r int8, exists bool) {
	v := m.level
	if v == nil {
		return
	}
	return *v, true
}

// OldLevel returns the old "level" field's value of the AreaCode entity.
// If the AreaCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AreaCodeMutation) OldLevel(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLevel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLevel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLevel: %w", err)
	}
	return oldValue.Level, nil
}

// AddLevel adds i to the "level" field.
func (m *AreaCodeMutation) AddLevel(i int8) {
	if m.addlevel != nil {
		*m.addlevel += i
	} else {
		m.addlevel = &i
	}
}

// AddedLevel returns the value that was added to the "level" field in this mutation.
func (m *AreaCodeMutation) AddedLevel() (r int8, exists bool) {
	v := m.addlevel
	if v == nil {
		return
	}
	return *v, true
}

// ResetLevel resets all changes to the "level" field.
func (m *AreaCodeMutation) ResetLevel() {
	m.level = nil
	m.addlevel = nil
}

// SetPCode sets the "p_code" field.
func (m *AreaCodeMutation) SetPCode(i int64) {
	m.p_code = &i
	m.addp_code = nil
}

// PCode returns the value of the "p_code" field in the mutation.
func (m *AreaCodeMutation) PCode() (r int64, exists bool) {
	v := m.p_code
	if v == nil {
		return
	}
	return *v, true
}

// OldPCode returns the old "p_code" field's value of the AreaCode entity.
// If the AreaCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AreaCodeMutation) OldPCode(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPCode: %w", err)
	}
	return oldValue.PCode, nil
}

// AddPCode adds i to the "p_code" field.
func (m *AreaCodeMutation) AddPCode(i int64) {
	if m.addp_code != nil {
		*m.addp_code += i
	} else {
		m.addp_code = &i
	}
}

// AddedPCode returns the value that was added to the "p_code" field in this mutation.
func (m *AreaCodeMutation) AddedPCode() (r int64, exists bool) {
	v := m.addp_code
	if v == nil {
		return
	}
	return *v, true
}

// ResetPCode resets all changes to the "p_code" field.
func (m *AreaCodeMutation) ResetPCode() {
	m.p_code = nil
	m.addp_code = nil
}

// Where appends a list predicates to the AreaCodeMutation builder.
func (m *AreaCodeMutation) Where(ps ...predicate.AreaCode) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AreaCodeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AreaCodeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AreaCode, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AreaCodeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AreaCodeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AreaCode).
func (m *AreaCodeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AreaCodeMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.code != nil {
		fields = append(fields, areacode.FieldCode)
	}
	if m.name != nil {
		fields = append(fields, areacode.FieldName)
	}
	if m.level != nil {
		fields = append(fields, areacode.FieldLevel)
	}
	if m.p_code != nil {
		fields = append(fields, areacode.FieldPCode)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AreaCodeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case areacode.FieldCode:
		return m.Code()
	case areacode.FieldName:
		return m.Name()
	case areacode.FieldLevel:
		return m.Level()
	case areacode.FieldPCode:
		return m.PCode()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AreaCodeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case areacode.FieldCode:
		return m.OldCode(ctx)
	case areacode.FieldName:
		return m.OldName(ctx)
	case areacode.FieldLevel:
		return m.OldLevel(ctx)
	case areacode.FieldPCode:
		return m.OldPCode(ctx)
	}
	return nil, fmt.Errorf("unknown AreaCode field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AreaCodeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case areacode.FieldCode:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case areacode.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case areacode.FieldLevel:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLevel(v)
		return nil
	case areacode.FieldPCode:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPCode(v)
		return nil
	}
	return fmt.Errorf("unknown AreaCode field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AreaCodeMutation) AddedFields() []string {
	var fields []string
	if m.addcode != nil {
		fields = append(fields, areacode.FieldCode)
	}
	if m.addlevel != nil {
		fields = append(fields, areacode.FieldLevel)
	}
	if m.addp_code != nil {
		fields = append(fields, areacode.FieldPCode)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AreaCodeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case areacode.FieldCode:
		return m.AddedCode()
	case areacode.FieldLevel:
		return m.AddedLevel()
	case areacode.FieldPCode:
		return m.AddedPCode()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AreaCodeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case areacode.FieldCode:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCode(v)
		return nil
	case areacode.FieldLevel:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLevel(v)
		return nil
	case areacode.FieldPCode:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPCode(v)
		return nil
	}
	return fmt.Errorf("unknown AreaCode numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AreaCodeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AreaCodeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AreaCodeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AreaCode nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AreaCodeMutation) ResetField(name string) error {
	switch name {
	case areacode.FieldCode:
		m.ResetCode()
		return nil
	case areacode.FieldName:
		m.ResetName()
		return nil
	case areacode.FieldLevel:
		m.ResetLevel()
		return nil
	case areacode.FieldPCode:
		m.ResetPCode()
		return nil
	}
	return fmt.Errorf("unknown AreaCode field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AreaCodeMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AreaCodeMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AreaCodeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AreaCodeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AreaCodeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AreaCodeMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AreaCodeMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AreaCode unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AreaCodeMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AreaCode edge %s", name)
}
